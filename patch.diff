From 6cdff99e412059e79079d59e3601ec0fdbb45922 Mon Sep 17 00:00:00 2001
From: AleManni <ale_manni@mail.com>
Date: Sat, 23 Jan 2021 13:55:02 +0000
Subject: [PATCH] Some refactoring

---
 ToDoList.xcodeproj/project.pbxproj            |  36 ++--
 .../xcdebugger/Breakpoints_v2.xcbkptlist      |   6 +
 ToDoList/Controller/ToDoListVC.swift          | 124 -----------
 .../Controller/ToDoListViewController.swift   | 204 ++++++++++++++++++
 .../Custom List Cell/CollectionViewCell.swift |  94 ++++----
 ToDoList/SceneDelegate.swift                  |   2 +-
 ToDoList/View/AddItemAlertController.swift    |   9 +
 ToDoList/View/ToDoListView.swift              | 164 --------------
 ToDoList/ViewModel/ListModelSection.swift     |   5 +
 ToDoList/ViewModel/ToDoListModel.swift        |  62 ++----
 ToDoList/ViewModel/ToDoListModelImpl.swift    | 103 +++++++++
 11 files changed, 396 insertions(+), 413 deletions(-)
 create mode 100644 ToDoList.xcodeproj/xcuserdata/alessandromanni.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
 delete mode 100644 ToDoList/Controller/ToDoListVC.swift
 create mode 100644 ToDoList/Controller/ToDoListViewController.swift
 create mode 100644 ToDoList/View/AddItemAlertController.swift
 delete mode 100644 ToDoList/View/ToDoListView.swift
 create mode 100644 ToDoList/ViewModel/ListModelSection.swift
 create mode 100644 ToDoList/ViewModel/ToDoListModelImpl.swift

diff --git a/ToDoList.xcodeproj/project.pbxproj b/ToDoList.xcodeproj/project.pbxproj
index 28fa271..5b1b542 100644
--- a/ToDoList.xcodeproj/project.pbxproj
+++ b/ToDoList.xcodeproj/project.pbxproj
@@ -7,21 +7,24 @@
 	objects = {
 
 /* Begin PBXBuildFile section */
+		2AC0A88925BDE60B002A3C15 /* ListModelSection.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2AC0A88825BDE60B002A3C15 /* ListModelSection.swift */; };
+		2AC0A88E25BDE84A002A3C15 /* ToDoListModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = 2AC0A88D25BDE84A002A3C15 /* ToDoListModel.swift */; };
 		920CDD5925A5D9E400A97DFF /* DataModel.xcdatamodeld in Sources */ = {isa = PBXBuildFile; fileRef = 920CDD5725A5D9E400A97DFF /* DataModel.xcdatamodeld */; };
-		926726D625AF57FB0014A423 /* ToDoListView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 926726D525AF57FB0014A423 /* ToDoListView.swift */; };
+		926726D625AF57FB0014A423 /* ToDoListViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 926726D525AF57FB0014A423 /* ToDoListViewController.swift */; };
 		926748F325B58B7400AE1624 /* CollectionViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 926748F125B58B7400AE1624 /* CollectionViewCell.swift */; };
 		926748F425B58B7400AE1624 /* CollectionViewCell.xib in Resources */ = {isa = PBXBuildFile; fileRef = 926748F225B58B7400AE1624 /* CollectionViewCell.xib */; };
 		92982C4025A31A1000C9DDAD /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 92982C3F25A31A1000C9DDAD /* AppDelegate.swift */; };
 		92982C4225A31A1000C9DDAD /* SceneDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 92982C4125A31A1000C9DDAD /* SceneDelegate.swift */; };
 		92982C4925A31A1200C9DDAD /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 92982C4825A31A1200C9DDAD /* Assets.xcassets */; };
 		92982C4C25A31A1200C9DDAD /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 92982C4A25A31A1200C9DDAD /* LaunchScreen.storyboard */; };
-		92B4ED7D25AC82F2004BB257 /* ToDoListVC.swift in Sources */ = {isa = PBXBuildFile; fileRef = 92B4ED7C25AC82F2004BB257 /* ToDoListVC.swift */; };
-		92B4ED8025AC84A2004BB257 /* ToDoListModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = 92B4ED7F25AC84A2004BB257 /* ToDoListModel.swift */; };
+		92B4ED8025AC84A2004BB257 /* ToDoListModelImpl.swift in Sources */ = {isa = PBXBuildFile; fileRef = 92B4ED7F25AC84A2004BB257 /* ToDoListModelImpl.swift */; };
 /* End PBXBuildFile section */
 
 /* Begin PBXFileReference section */
+		2AC0A88825BDE60B002A3C15 /* ListModelSection.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ListModelSection.swift; sourceTree = "<group>"; };
+		2AC0A88D25BDE84A002A3C15 /* ToDoListModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListModel.swift; sourceTree = "<group>"; };
 		920CDD5825A5D9E400A97DFF /* DataModel.xcdatamodel */ = {isa = PBXFileReference; lastKnownFileType = wrapper.xcdatamodel; path = DataModel.xcdatamodel; sourceTree = "<group>"; };
-		926726D525AF57FB0014A423 /* ToDoListView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListView.swift; sourceTree = "<group>"; };
+		926726D525AF57FB0014A423 /* ToDoListViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListViewController.swift; sourceTree = "<group>"; };
 		926748F125B58B7400AE1624 /* CollectionViewCell.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CollectionViewCell.swift; sourceTree = "<group>"; };
 		926748F225B58B7400AE1624 /* CollectionViewCell.xib */ = {isa = PBXFileReference; lastKnownFileType = file.xib; path = CollectionViewCell.xib; sourceTree = "<group>"; };
 		92982C3C25A31A1000C9DDAD /* ToDoList.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = ToDoList.app; sourceTree = BUILT_PRODUCTS_DIR; };
@@ -30,8 +33,7 @@
 		92982C4825A31A1200C9DDAD /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
 		92982C4B25A31A1200C9DDAD /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
 		92982C4D25A31A1200C9DDAD /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
-		92B4ED7C25AC82F2004BB257 /* ToDoListVC.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListVC.swift; sourceTree = "<group>"; };
-		92B4ED7F25AC84A2004BB257 /* ToDoListModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListModel.swift; sourceTree = "<group>"; };
+		92B4ED7F25AC84A2004BB257 /* ToDoListModelImpl.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ToDoListModelImpl.swift; sourceTree = "<group>"; };
 /* End PBXFileReference section */
 
 /* Begin PBXFrameworksBuildPhase section */
@@ -56,7 +58,7 @@
 		926726D825AF580D0014A423 /* Controller */ = {
 			isa = PBXGroup;
 			children = (
-				92B4ED7C25AC82F2004BB257 /* ToDoListVC.swift */,
+				926726D525AF57FB0014A423 /* ToDoListViewController.swift */,
 			);
 			path = Controller;
 			sourceTree = "<group>";
@@ -94,7 +96,6 @@
 				920CDD5625A5D9CC00A97DFF /* Model */,
 				92982C5725A32AE700C9DDAD /* ViewModel */,
 				926726D825AF580D0014A423 /* Controller */,
-				92B4ED7625AC8025004BB257 /* View */,
 				926748F625B5932400AE1624 /* Custom List Cell */,
 				92982C4825A31A1200C9DDAD /* Assets.xcassets */,
 				92982C4A25A31A1200C9DDAD /* LaunchScreen.storyboard */,
@@ -106,19 +107,13 @@
 		92982C5725A32AE700C9DDAD /* ViewModel */ = {
 			isa = PBXGroup;
 			children = (
-				92B4ED7F25AC84A2004BB257 /* ToDoListModel.swift */,
+				92B4ED7F25AC84A2004BB257 /* ToDoListModelImpl.swift */,
+				2AC0A88D25BDE84A002A3C15 /* ToDoListModel.swift */,
+				2AC0A88825BDE60B002A3C15 /* ListModelSection.swift */,
 			);
 			path = ViewModel;
 			sourceTree = "<group>";
 		};
-		92B4ED7625AC8025004BB257 /* View */ = {
-			isa = PBXGroup;
-			children = (
-				926726D525AF57FB0014A423 /* ToDoListView.swift */,
-			);
-			path = View;
-			sourceTree = "<group>";
-		};
 /* End PBXGroup section */
 
 /* Begin PBXNativeTarget section */
@@ -190,13 +185,14 @@
 			isa = PBXSourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				926726D625AF57FB0014A423 /* ToDoListView.swift in Sources */,
-				92B4ED8025AC84A2004BB257 /* ToDoListModel.swift in Sources */,
+				926726D625AF57FB0014A423 /* ToDoListViewController.swift in Sources */,
+				2AC0A88E25BDE84A002A3C15 /* ToDoListModel.swift in Sources */,
+				92B4ED8025AC84A2004BB257 /* ToDoListModelImpl.swift in Sources */,
 				920CDD5925A5D9E400A97DFF /* DataModel.xcdatamodeld in Sources */,
 				926748F325B58B7400AE1624 /* CollectionViewCell.swift in Sources */,
 				92982C4025A31A1000C9DDAD /* AppDelegate.swift in Sources */,
 				92982C4225A31A1000C9DDAD /* SceneDelegate.swift in Sources */,
-				92B4ED7D25AC82F2004BB257 /* ToDoListVC.swift in Sources */,
+				2AC0A88925BDE60B002A3C15 /* ListModelSection.swift in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
diff --git a/ToDoList.xcodeproj/xcuserdata/alessandromanni.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist b/ToDoList.xcodeproj/xcuserdata/alessandromanni.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
new file mode 100644
index 0000000..9f22ba6
--- /dev/null
+++ b/ToDoList.xcodeproj/xcuserdata/alessandromanni.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Bucket
+   uuid = "B9CDDDE7-580B-4F9D-9999-AAB50DD96B5F"
+   type = "1"
+   version = "2.0">
+</Bucket>
diff --git a/ToDoList/Controller/ToDoListVC.swift b/ToDoList/Controller/ToDoListVC.swift
deleted file mode 100644
index 9d89fa9..0000000
--- a/ToDoList/Controller/ToDoListVC.swift
+++ /dev/null
@@ -1,124 +0,0 @@
-//
-//  ToDoListView.swift
-//  ToDoList
-//
-//  Created by Niclas Jeppsson on 11/01/2021.
-//
-
-import UIKit
-import CoreData
-
-class ToDoListVC: UIViewController {
-    
-    let toDoListView = ToDoListView()
-    let viewModel = ToDoListModel()
-
-    override func viewDidLoad() {
-        super.viewDidLoad()
-        
-        toDoListView.view = self
-        toDoListView.toDoListModel = viewModel
-        
-        toDoListView.searchController.searchResultsUpdater = self
-        toDoListView.searchController.searchBar.delegate = self
-        
-        toDoListView.navBarSetup()
-        
-        toDoListView.collectionViewSetup()
-        toDoListView.collectionViewConstraints(view)
-        toDoListView.collectionView.delegate = self
-        
-        setupList()
-        
-        viewModel.loadData()
-
-    }
-    
-    func setupList(){
-        
-        viewModel.dataSource = UICollectionViewDiffableDataSource<ToDoListModel.Section, ListModel>(collectionView: toDoListView.collectionView) {collectionView, indexPath, listModel in
-            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "reusableListCell", for: indexPath) as! CollectionViewCell
-            cell.label.text = listModel.item
-            if self.viewModel.listItems[indexPath.item].done {
-                cell.checkMark.image = UIImage(systemName: "checkmark")
-            } else {
-                cell.checkMark.image = .none
-            }
-            return cell
-        }
-        
-    }
-
-
-}
-
-//MARK: - UICollectionView Delegate
-extension ToDoListVC : UICollectionViewDelegate {
-    
-    ///Highlighted cell background
-    func collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath) {
-        let cell = collectionView.cellForItem(at: indexPath) as! CollectionViewCell
-        cell.backgroundColor = .systemTeal
-    }
-    
-    ///Unhighlighted cell background
-    func collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath) {
-        let cell = collectionView.cellForItem(at: indexPath) as! CollectionViewCell
-        cell.backgroundColor = .white
-    }
-    
-    ///Selected Cell interaction
-    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
-        
-    }
-    
-}
-
-//MARK: - SearchResultsUpdating
-extension ToDoListVC : UISearchResultsUpdating {
-    func updateSearchResults(for searchController: UISearchController) {
-        
-    }
-    
-}
-
-//MARK: - SearchBarDelegate Methods
-extension ToDoListVC : UISearchBarDelegate {
-    
-    ///When user taps Search on keyboard
-    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
-        
-        let request:NSFetchRequest<ListModel> = ListModel.fetchRequest()
-        
-        request.predicate = NSPredicate(format: "item CONTAINS[cd] %@", searchBar.text!)
-        
-        request.sortDescriptors = [NSSortDescriptor(key: "item", ascending: true)]
-        
-        viewModel.loadData(with: request)
-    }
-    
-    ///When user taps Cancel
-    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
-        viewModel.loadData()
-    }
-    
-    ///Continious update of list as user types in search bar
-    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
-        
-        if searchBar.text?.count == 0 {
-            viewModel.loadData()
-            
-        } else {
-        
-        let request:NSFetchRequest<ListModel> = ListModel.fetchRequest()
-
-        request.predicate = NSPredicate(format: "item CONTAINS[cd] %@", searchBar.text!)
-
-        request.sortDescriptors = [NSSortDescriptor(key: "item", ascending: true)]
-
-            viewModel.loadData(with: request)
-    }
-    
-}
-    
-}
diff --git a/ToDoList/Controller/ToDoListViewController.swift b/ToDoList/Controller/ToDoListViewController.swift
new file mode 100644
index 0000000..702dc9f
--- /dev/null
+++ b/ToDoList/Controller/ToDoListViewController.swift
@@ -0,0 +1,204 @@
+//
+//  ToDoListView.swift
+//  ToDoList
+//
+//  Created by Niclas Jeppsson on 13/01/2021.
+//
+
+import UIKit
+
+final class ToDoListViewController: UIViewController {
+  
+  private enum Constants {
+    static let titleColor = UIColor.white
+    static let barBackgroundColor = UIColor(red: 1, green: 0.70, blue: 0.42, alpha: 1)
+    static let deleteActionBackgroundColor = UIColor(red: 1.00, green: 0.27, blue: 0.27, alpha: 1.00)
+    static let doneActionBackgroundColor = UIColor(red: 0.51, green: 0.66, blue: 0.36, alpha: 1.00)
+    static let collectionViewBackgroundColor = UIColor(red: 0.99, green: 0.97, blue: 0.91, alpha: 1.00)
+  }
+  
+  // MARK: Private properties
+  
+  private lazy var layout: UICollectionViewCompositionalLayout = {
+    var configuration = UICollectionLayoutListConfiguration(appearance: .insetGrouped)
+    configuration.backgroundColor = UIColor(red: 0.99, green: 0.97, blue: 0.91, alpha: 1.00)
+    configuration.trailingSwipeActionsConfigurationProvider = {(indexPath) in
+      
+      ///Delete Button Setup
+      let deleteAction = UIContextualAction(style: .destructive, title: "Delete") { [weak self] (action, view, completion) in
+        self?.swipeActionDelete(indexPath)
+        completion(true)
+      }
+      
+      ///Done Button Setup
+      let doneAction = UIContextualAction(style: .normal, title: "Done") { [weak self] (action, view, completion) in
+        self?.swipeActionDone(indexPath)
+        completion(true)
+      }
+      deleteAction.backgroundColor = Constants.deleteActionBackgroundColor
+      doneAction.backgroundColor = Constants.doneActionBackgroundColor
+      return UISwipeActionsConfiguration(actions: [deleteAction, doneAction])
+    }
+    
+    return UICollectionViewCompositionalLayout.list(using: configuration)
+  }()
+  
+  private lazy var collectionView: UICollectionView = {
+    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
+    collectionView.register(UINib(nibName: "CollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "reusableListCell")
+    collectionView.backgroundColor = Constants.collectionViewBackgroundColor
+    collectionView.translatesAutoresizingMaskIntoConstraints = false
+    collectionView.delegate = self
+    return collectionView
+  }()
+  
+  private lazy var buttonItem: UIBarButtonItem = {
+    let item = UIBarButtonItem(image: UIImage(systemName: "plus"), style: .plain, target: self, action: #selector(didTapAddButton(_:)))
+    item.tintColor = .white
+    return item
+  }()
+  
+  private lazy var searchController: UISearchController = {
+    let searchController = UISearchController(searchResultsController: nil)
+    searchController.obscuresBackgroundDuringPresentation = false
+    searchController.searchBar.placeholder = "Search To-Do's"
+    searchController.searchBar.tintColor = .white
+    searchController.searchBar.barStyle = UIBarStyle.black
+    searchController.searchBar.delegate = self
+    searchController.searchResultsUpdater = self
+    return searchController
+  }()
+  
+  private lazy var alertController: UIAlertController = {
+    var textField = UITextField()
+    let alert = UIAlertController(title: "Add New To-Do Item", message: "", preferredStyle: .alert)
+    alert.addTextField { alertTextField in
+      alertTextField.placeholder = "Add New Item"
+      textField = alertTextField
+    }
+    
+    let action = UIAlertAction(title: "Add Item", style: .default) { [weak self] alertAction in
+      guard let text = textField.text,
+            !text.isEmpty else {
+        self?.dismiss(animated: UIView.areAnimationsEnabled)
+        return
+      }
+      self?.toDoListModel.addNewItem(text)
+    }
+    
+    alert.addAction(action)
+    return alert
+  }()
+  
+  private lazy var dataSource = UICollectionViewDiffableDataSource<ListModelSection, ListModel>(collectionView: collectionView) { collectionView, indexPath, listModel in
+    guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "reusableListCell", for: indexPath) as? CollectionViewCell else {
+      assertionFailure("Unable to dequeue colleciton view cell")
+      return nil
+    }
+    cell.configure(with: self.toDoListModel.itemModels[indexPath.item])
+    return cell
+}
+  
+  private let toDoListModel: ToDoListModel
+  
+  // MARK: Lifecycle
+  
+  init(viewModel: ToDoListModel) {
+    self.toDoListModel = viewModel
+    super.init(nibName: nil, bundle: nil)
+    setConstraints()
+  }
+  
+  required init?(coder: NSCoder) {
+    fatalError("init(coder:) has not been implemented")
+  }
+  
+  override func viewDidAppear(_ animated: Bool)  {
+    super.viewDidAppear(animated)
+    navBarSetup()
+    toDoListModel.start(with: dataSource)
+  }
+  
+  // MARK: Private functions
+  
+  private func navBarSetup(){
+    let navBarApperance = UINavigationBarAppearance()
+    navBarApperance.backgroundColor = Constants.barBackgroundColor
+    navBarApperance.largeTitleTextAttributes = [.foregroundColor: Constants.titleColor]
+    navBarApperance.titleTextAttributes = [.foregroundColor: Constants.titleColor]
+    
+    navigationController?.navigationBar.standardAppearance = navBarApperance
+    navigationController?.navigationBar.scrollEdgeAppearance = navBarApperance
+    navigationItem.searchController = searchController
+    navigationItem.rightBarButtonItem = buttonItem
+    definesPresentationContext = true
+    navigationController?.navigationBar.prefersLargeTitles = true
+  }
+  
+  ///CollectionViewListConstraints
+  private func setConstraints(){
+    view.addSubview(collectionView)
+    ///Layout Constraints for CollectionView
+    NSLayoutConstraint.activate([
+      collectionView.topAnchor.constraint(equalTo: view.topAnchor),collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor), collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor), collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
+    ])
+  }
+  
+  @objc private func didTapAddButton(_ sender: UIButton){
+    present(alertController, animated: true) {
+    }
+  }
+  
+  private func swipeActionDelete(_ indexPath:IndexPath){
+    toDoListModel.deleteItem(at: indexPath)
+  }
+  
+  private func swipeActionDone(_ indexPath:IndexPath){
+    toDoListModel.markAsDone(at: indexPath)
+  }
+}
+
+//MARK: - UICollectionView Delegate
+extension ToDoListViewController: UICollectionViewDelegate {
+  
+  ///Highlighted cell background
+  func collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath) {
+    let cell = collectionView.cellForItem(at: indexPath) as! CollectionViewCell
+    cell.backgroundColor = .systemTeal
+  }
+  
+  ///Unhighlighted cell background
+  func collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath) {
+    let cell = collectionView.cellForItem(at: indexPath) as! CollectionViewCell
+    cell.backgroundColor = .white
+  }
+}
+
+//MARK: - SearchResultsUpdating
+extension ToDoListViewController : UISearchResultsUpdating {
+  
+  // Why this empty implementation? We can skip the whole implemenration of UISearchBarDelegate by implementing this. Quick how to: https://www.hackingwithswift.com/example-code/uikit/how-to-use-uisearchcontroller-to-let-users-enter-search-words)
+  func updateSearchResults(for searchController: UISearchController) {
+  }
+  
+}
+
+//MARK: - SearchBarDelegate Methods
+// As per above, I think you can delete this and move the relevant code in the protocol implementation above
+extension ToDoListViewController : UISearchBarDelegate {
+  
+  ///When user taps Search on keyboard
+  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
+    toDoListModel.update(fromSearchKey: searchBar.text)
+  }
+  
+  ///When user taps Cancel
+  func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
+    toDoListModel.update()
+  }
+  
+  ///Continious update of list as user types in search bar
+  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
+    toDoListModel.update(fromSearchKey: searchBar.text)
+  }
+}
diff --git a/ToDoList/Custom List Cell/CollectionViewCell.swift b/ToDoList/Custom List Cell/CollectionViewCell.swift
index 7404fef..41ba809 100644
--- a/ToDoList/Custom List Cell/CollectionViewCell.swift	
+++ b/ToDoList/Custom List Cell/CollectionViewCell.swift	
@@ -7,58 +7,44 @@
 
 import UIKit
 
-class CollectionViewCell: UICollectionViewCell {
-    
-    let label = UILabel()
-    var checkMark = UIImageView()
-
-    override func awakeFromNib() {
-        super.awakeFromNib()
-        
-        backgroundColor = .white
-        
-        labelDesign()
-        checkMarkDesign()
-        
-        labelConstraints()
-        checkMarkConstraints()
-        
-        
-    }
-    
-    func labelDesign(){
-        
-        label.textColor = .black
-        label.font = UIFont(name: "Helvetica", size: 17)
-        
-        
-    }
-    
-    func checkMarkDesign(){
-        
-        
-        checkMark.tintColor = .blue
-                
-    }
-    
-    func labelConstraints(){
-        
-        addSubview(label)
-        
-        label.translatesAutoresizingMaskIntoConstraints = false
-        
-        NSLayoutConstraint.activate([label.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 15), label.topAnchor.constraint(equalTo: topAnchor, constant: 15)])
-        
-    }
-    
-    func checkMarkConstraints(){
-        
-        addSubview(checkMark)
-        
-        checkMark.translatesAutoresizingMaskIntoConstraints = false
-        
-        NSLayoutConstraint.activate([checkMark.trailingAnchor.constraint(equalTo: trailingAnchor),checkMark.topAnchor.constraint(equalTo: topAnchor, constant: 15), checkMark.widthAnchor.constraint(equalToConstant: 20), checkMark.heightAnchor.constraint(equalToConstant: 20)])
-        
-    }
-
+class CollectionViewCell: UICollectionViewCell, Identifiable {
+  
+  private let label: UILabel = {
+    let l = UILabel()
+    l.textColor = .black
+    l.font = UIFont(name: "Helvetica", size: 17)
+    l.translatesAutoresizingMaskIntoConstraints = false
+    return l
+  }()
+  
+  private let checkMark: UIImageView = {
+    let c = UIImageView(image: UIImage(systemName: "checkmark"))
+    c.tintColor = .blue
+    c.translatesAutoresizingMaskIntoConstraints = false
+    return c
+  }()
+  
+  override func awakeFromNib() {
+    super.awakeFromNib()
+    backgroundColor = .white
+    contentView.addSubview(label)
+    contentView.addSubview(checkMark)
+    setContraints()
+  }
+  
+  func configure(with listModel: ListModel) {
+    label.text = listModel.item
+    checkMark.isHidden = !listModel.done
+  }
+  
+  private func setContraints() {
+    NSLayoutConstraint.activate([
+      label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 15),
+      label.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15),
+      checkMark.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
+      checkMark.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15),
+      checkMark.widthAnchor.constraint(equalToConstant: 20),
+      checkMark.heightAnchor.constraint(equalToConstant: 20)
+    ])
+  }
 }
diff --git a/ToDoList/SceneDelegate.swift b/ToDoList/SceneDelegate.swift
index f17bb0a..c4fc444 100644
--- a/ToDoList/SceneDelegate.swift
+++ b/ToDoList/SceneDelegate.swift
@@ -17,7 +17,7 @@ class SceneDelegate: UIResponder, UIWindowSceneDelegate {
         
         window = UIWindow(windowScene: windowScene)
         
-        let vc = ToDoListVC()
+        let vc = ToDoListViewController(viewModel: ToDoListModelImpl())
         vc.title = "To Do List"
         let nv = UINavigationController(rootViewController: vc)
         
diff --git a/ToDoList/View/AddItemAlertController.swift b/ToDoList/View/AddItemAlertController.swift
new file mode 100644
index 0000000..51683bd
--- /dev/null
+++ b/ToDoList/View/AddItemAlertController.swift
@@ -0,0 +1,9 @@
+//
+//  AddItemAlertView.swift
+//  ToDoList
+//
+//  Created by Alessandro Manni on 23/01/2021.
+//  Copyright © 2021 Niclas Jeppsson. All rights reserved.
+//
+
+import Foundation
diff --git a/ToDoList/View/ToDoListView.swift b/ToDoList/View/ToDoListView.swift
deleted file mode 100644
index c0e2e87..0000000
--- a/ToDoList/View/ToDoListView.swift
+++ /dev/null
@@ -1,164 +0,0 @@
-//
-//  ToDoListView.swift
-//  ToDoList
-//
-//  Created by Niclas Jeppsson on 13/01/2021.
-//
-
-import UIKit
-import CoreData
-
-class ToDoListView {
-    
-    private var configuration = UICollectionLayoutListConfiguration(appearance: .insetGrouped)
-    var collectionView:UICollectionView!
-    
-    let searchController = UISearchController(searchResultsController: nil)
-    
-    var toDoListModel:ToDoListModel!
-    var view:UIViewController!
-    
-    ///NavigationBar Setup
-    func navBarSetup(){
-    
-        let navBarApperance = UINavigationBarAppearance()
-        navBarApperance.backgroundColor = UIColor(red: 1.00, green: 0.70, blue: 0.42, alpha: 1.00)
-        navBarApperance.largeTitleTextAttributes = [.foregroundColor:UIColor.white]
-        navBarApperance.titleTextAttributes = [.foregroundColor:UIColor.white]
-        
-        view.navigationController?.navigationBar.standardAppearance = navBarApperance
-        view.navigationController?.navigationBar.scrollEdgeAppearance = navBarApperance
-        view.navigationController?.navigationBar.prefersLargeTitles = true
-        
-        
-        searchController.obscuresBackgroundDuringPresentation = false
-        searchController.searchBar.placeholder = "Search To-Do's"
-        searchController.searchBar.tintColor = .white
-        searchController.searchBar.barStyle = UIBarStyle.black
-        
-        view.navigationItem.searchController = searchController
-        
-        view.definesPresentationContext = true
-        
-        let buttonImage = UIBarButtonItem(image: UIImage(systemName: "plus"), style: .plain, target: self, action: #selector(addButton(_:)))
-        buttonImage.tintColor = .white
-        view.navigationItem.rightBarButtonItem = buttonImage
-        
-    }
-
-    
-    ///CollectionViewList Design
-    func collectionViewSetup() {
-        
-        configuration.backgroundColor = UIColor(red: 0.99, green: 0.97, blue: 0.91, alpha: 1.00)
-        configuration.trailingSwipeActionsConfigurationProvider = {(indexPath) in
-            
-            ///Delete Button Setup
-            let deleteAction = UIContextualAction(style: .destructive, title: "Delete") { (action, view, completion) in
-                self.swipeActionDelete(indexPath)
-                completion(true)
-            }
-            
-            ///Done Button Setup
-            let doneAction = UIContextualAction(style: .normal, title: "Done") { (action, view, completion) in
-                self.swipeActionDone(indexPath)
-                completion(true)
-            }
-            deleteAction.backgroundColor = UIColor(red: 1.00, green: 0.27, blue: 0.27, alpha: 1.00)
-            doneAction.backgroundColor = UIColor(red: 0.51, green: 0.66, blue: 0.36, alpha: 1.00)
-            return UISwipeActionsConfiguration(actions: [deleteAction, doneAction])
-            
-        }
-        
-        let layout = UICollectionViewCompositionalLayout.list(using: configuration)
-        
-        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
-        collectionView.register(UINib(nibName: "CollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "reusableListCell")
-        collectionView.backgroundColor = UIColor(red: 0.99, green: 0.97, blue: 0.91, alpha: 1.00)
-        
-    }
-    
-    ///CollectionViewListConstraints
-    func collectionViewConstraints(_ view:UIView){
-        
-        view.addSubview(collectionView)
-        
-        collectionView.translatesAutoresizingMaskIntoConstraints = false
-        
-        ///Layout Constraints for CollectionView
-        NSLayoutConstraint.activate([
-            collectionView.topAnchor.constraint(equalTo: view.topAnchor),collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor), collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor), collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
-        ])
-    }
-    
-    ///Button Action From NavigationController
-    @objc func addButton(_ sender:UIButton){
-        
-        var textField = UITextField()
-        
-        let alert = UIAlertController(title: "Add New To-Do Item", message: "", preferredStyle: .alert)
-        
-        let action = UIAlertAction(title: "Add Item", style: .default) { alertAction in
-            
-            ///Check if text field is empy
-            if textField.text?.isEmpty == true{
-                
-                self.view.dismiss(animated: true)
-            } else {
-                
-                ///Create new NSManagedObject for DataModel
-                let newListItem = ListModel(context: self.toDoListModel.context)
-                newListItem.item = textField.text
-
-                ///Appends array with new object
-                self.toDoListModel.listItems.append(newListItem)
-
-                ///Saves new Data through the Context
-                self.toDoListModel.saveData()
-            }
-        }
-        
-        alert.addTextField {alertTextField in
-            alertTextField.placeholder = "Add New Item"
-            textField = alertTextField
-        }
-        
-        alert.addAction(action)
-        
-        view.present(alert, animated: true) {
-            
-        }
-    }
-    
-    ///Deletes cell when user clicks Delete
-    func swipeActionDelete(_ indexPath:IndexPath){
-
-        ///Deletes selected item from the context
-        toDoListModel.context.delete(toDoListModel.listItems[indexPath.item])
-        
-        ///Deletes selected item from listItem Array
-        toDoListModel.listItems.remove(at: indexPath.item)
-        
-        ///Saves data to the persistent container
-        toDoListModel.saveData()
-
-    }
-    
-    ///Adds checkmark to completed items
-    func swipeActionDone(_ indexPath:IndexPath){
-        
-        toDoListModel.listItems[indexPath.item].done = !toDoListModel.listItems[indexPath.item].done
-        
-        let cell = collectionView.cellForItem(at: indexPath) as! CollectionViewCell
-        
-        if toDoListModel.listItems[indexPath.item].done {
-            cell.checkMark.image = UIImage(systemName: "checkmark")
-        } else {
-            cell.checkMark.image = .none
-        }
-        
-        toDoListModel.saveData()
-        
-    }
-    
-}
diff --git a/ToDoList/ViewModel/ListModelSection.swift b/ToDoList/ViewModel/ListModelSection.swift
new file mode 100644
index 0000000..8a99f46
--- /dev/null
+++ b/ToDoList/ViewModel/ListModelSection.swift
@@ -0,0 +1,5 @@
+import Foundation
+
+enum ListModelSection: Hashable {
+  case main
+}
diff --git a/ToDoList/ViewModel/ToDoListModel.swift b/ToDoList/ViewModel/ToDoListModel.swift
index 3b8dbc9..914b1b5 100644
--- a/ToDoList/ViewModel/ToDoListModel.swift
+++ b/ToDoList/ViewModel/ToDoListModel.swift
@@ -1,56 +1,18 @@
-//
-//  ToDoListModel.swift
-//  ToDoList
-//
-//  Created by Niclas Jeppsson on 11/01/2021.
-//
-
+import Foundation
 import UIKit
-import CoreData
 
-class ToDoListModel {
-    
-    var dataSource:UICollectionViewDiffableDataSource<Section, ListModel>!
-    
-    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
-    
-    var listItems:[ListModel] = []
-    
-    func snapShot(_ listModel:[ListModel]){
-        
-        var snapShot = NSDiffableDataSourceSnapshot<Section, ListModel>()
-        snapShot.appendSections([.main])
-        snapShot.appendItems(listModel)
-        dataSource.apply(snapShot)
-    }
-    
-    ///Saves Data to Persistent Container
-    func saveData(){
-        
-        do {
-            try context.save()
-        } catch {
-            print("Error saving \(error)")
-        }
-        ///Updates ListView
-        snapShot(listItems)
-    }
-    
-    ///Loads Data from Persistent Container
-    func loadData(with request: NSFetchRequest<ListModel> = ListModel.fetchRequest()){
-        do{
-            listItems = try context.fetch(request)
-        } catch {
-            print("Error requesting data \(error)")
-        }
-        snapShot(listItems)
-    }
-    
+protocol ToDoListModel {
+  var itemModels: [ListModel] { get }
+  func start(with dataSource: UICollectionViewDiffableDataSource<ListModelSection, ListModel>)
+  func update(fromSearchKey searchKey: String?)
+  func addNewItem(_ item: String)
+  func deleteItem(at indexPath: IndexPath)
+  func markAsDone(at indexPath: IndexPath)
 }
 
-//MARK: - Section Enum
 extension ToDoListModel {
-    enum Section {
-        case main
-    }
+  
+  func update(fromSearchKey searchKey: String? = nil) {
+    update(fromSearchKey: searchKey)
+  }
 }
diff --git a/ToDoList/ViewModel/ToDoListModelImpl.swift b/ToDoList/ViewModel/ToDoListModelImpl.swift
new file mode 100644
index 0000000..96c03ce
--- /dev/null
+++ b/ToDoList/ViewModel/ToDoListModelImpl.swift
@@ -0,0 +1,103 @@
+//
+//  ToDoListModel.swift
+//  ToDoList
+//
+//  Created by Niclas Jeppsson on 11/01/2021.
+//
+
+import UIKit
+import CoreData
+
+final class ToDoListModelImpl {
+  
+  private var dataSource: UICollectionViewDiffableDataSource<ListModelSection, ListModel>?
+  
+  private let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
+  
+  private var listItems = [ListModel]()
+  
+  // MARK: Private
+  
+  ///Loads Data from Persistent Container
+  private func loadData(with request: NSFetchRequest<ListModel> = ListModel.fetchRequest()){
+    do{
+      listItems = try context.fetch(request)
+    } catch {
+      print("Error requesting data \(error)")
+    }
+    snapShot(listItems)
+  }
+  
+  // And although this could well be part of the function above, I think it ads clarity if we encapsualte the logic like this
+  private func makeRequest(text: String) -> NSFetchRequest<ListModel>  {
+    let request: NSFetchRequest<ListModel> = ListModel.fetchRequest()
+    request.predicate = NSPredicate(format: "item CONTAINS[cd] %@", text)
+    request.sortDescriptors = [NSSortDescriptor(key: "item", ascending: true)]
+    return request
+  }
+  
+  ///Saves Data to Persistent Container
+  private func saveData() {
+    do {
+      try context.save()
+    } catch {
+      print("Error saving \(error)")
+    }
+  }
+  
+  private func snapShot(_ listModel: [ListModel]) {
+    var snapShot = NSDiffableDataSourceSnapshot<ListModelSection, ListModel>()
+    snapShot.appendSections([.main])
+    snapShot.appendItems(listModel)
+    dataSource?.apply(snapShot, animatingDifferences: false)
+    // Unfortunate bug in this Apple API forces us to not animate the differences: https://developer.apple.com/forums/thread/126742
+  }
+}
+
+
+//MARK: - ToDoListModel
+extension ToDoListModelImpl: ToDoListModel {
+  
+  var itemModels: [ListModel] {
+    listItems
+  }
+  
+  func start(with dataSource: UICollectionViewDiffableDataSource<ListModelSection, ListModel>) {
+    self.dataSource = dataSource
+    loadData()
+  }
+  
+  // This new func + refactoring allows to avoid code repetition. The optionality + guard eliminates the need of force unwrapping the searchBar.text in the VC class - Force unwrapping is a huge cause of crashes and def. someting to avoid in most csses
+  
+  func update(fromSearchKey searchKey: String? = nil) {
+    guard let text = searchKey,
+          !text.isEmpty else {
+      loadData()
+      return
+    }
+    loadData(with: makeRequest(text: text))
+  }
+  
+  func addNewItem(_ item: String) {
+    //Create new NSManagedObject for DataModel
+    let newListItem = ListModel(context: context)
+    newListItem.item = item
+    ///Appends array with new object
+    listItems.append(newListItem)
+    ///Saves new Data through the Context
+    saveData()
+    loadData()
+  }
+  
+  func deleteItem(at indexPath: IndexPath) {
+    context.delete(listItems[indexPath.item])
+    saveData()
+    loadData()
+  }
+  
+  func markAsDone(at indexPath: IndexPath) {
+    listItems[indexPath.item].done.toggle()
+    saveData()
+    loadData()
+  }
+}
-- 
2.20.1

